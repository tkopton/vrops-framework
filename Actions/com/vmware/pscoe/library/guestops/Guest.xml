<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="Guest" result-type="Any" api-version="6.0.0" id="edb292e6-7e20-4c02-89c7-58b04d756cac" version="0.0.5" allowed-operations="evf" category-name="com.vmware.pscoe.library.guestops">
  <param n="vm" t="VC:VirtualMachine"><![CDATA[]]></param>
  <param n="username" t="string"><![CDATA[]]></param>
  <param n="password" t="SecureString"><![CDATA[]]></param>
  <script encoded="false"><![CDATA[var logger = System.getModule("com.vmware.pscoe.library.logging").getLogger("com.vmware.pscoe.guest");

var Guest = function() {
	System.getModule("com.vmware.pscoe.library.util").validateInput(vm, "Virtual Machine input parameter missing or null");
	System.getModule("com.vmware.pscoe.library.util").validateInput(username, "Username input parameter missing or null");
	System.getModule("com.vmware.pscoe.library.util").validateInput(password, "Password input parameter missing or null");

	var self = this;
	var host = vm.sdkConnection;
	var guestOperationsManager = host.guestOperationsManager;
	var guestAuth = new VcNamePasswordAuthentication();
	guestAuth.username = username;
	guestAuth.password = password;
	guestAuth.interactiveSession = false;

	var vmwareImcLogDirectory = {
		linux: "/var/log/vmware-imc",
		windows: "c:\\Windows\\Temp\\vmware-imc"
	}

	var processManager = guestOperationsManager.processManager;
	var fileManager = guestOperationsManager.fileManager;

	var guestTools = {
		timeout: 5,
		retryCount: 1,
		retrySleep: 10,
	}

	var retry = function(callback) {
		if (!callback.name) {
			throw "Anonymous function are note supported!"
		}

		var report = {
			GuestOperationName: callback.name,
			errors: {}
		};

		for (var retry = 1; retry <= guestTools.retryCount; retry++) {
			try {
				self.waitGuestTools();
				return callback();
			} catch (e) {
				report.errors[retry] = e;
				logger.error("Guest operation failed with error:" + e);
				logger.info("Guest operation Retry[" + retry + "/" + guestTools.retryCount + "] after Seconds[" + guestTools.retrySleep + "]");
				System.sleep(guestTools.retrySleep * 1000);
			}
		}
		throw JSON.stringify(report, null, 2);
	}

	/**
	 * Wait for VMware tools to become ready
	 */
	this.waitGuestTools = function() {
		if (guestTools.timeout < 1 || self.isGuestToolsRunning() === true) {
			return;
		}

		var endDate = new Date();
		endDate.setMinutes(endDate.getMinutes() + guestTools.timeout);
		logger.info("Waiting up to " + guestTools.timeout + " minutes for VMware Tools to become available on the guest...");
		while (true) {
			var guestToolsStatus = vm.guest.toolsRunningStatus;
			System.debug("\tCurrent status of VMware Tools: " + guestToolsStatus);
			if (self.isGuestToolsRunning() === true) {
				break;
			} else if (endDate.getTime() < (new Date()).getTime()) {
				throw "VMware Tools on VM " + vm.name + " did not start in timely manner.";
			}

			System.sleep(10000);
		}
	}

	/**
	 * Sets the maximum time (in minutes) to wait for VMware Tools to start before 
	 * performing any operation on the guest. Defaults to 5 minutes.
	 * 
	 * If the timeout is set to a negative number or 0, each guest operation will 
	 * instantly throw an exception if VMware Tools are not running on the VM.
	 * 
	 * @param timeout
	 */
	this.setGuestToolsTimeout = function(timeout) {
		guestTools.timeout = timeout;
	}

	/**
	 * Sets default retry count and sleep interval for VMware tools operations
	 * 
	 * @param count
	 * @param sleep - in seconds
	 */
	this.setGuestToolsRetry = function(count, sleep) {
		guestTools.retryCount = count;
		guestTools.retrySleep = sleep;
	}

	/**
	 * Checks if VMware Tools are running in the guest.
	 * 
	 * This check is automatically performed before each guest operation. If the guest tools
	 * are not running, the operation is blocked until they become available or until a 
	 * timeout is reached. The timeout is configurable via `setGuestToolsTimeout()`.
	 * 
	 * @returns `true` if VMware Tools are running in the guest; `false` otherwise
	 */
	this.isGuestToolsRunning = function() {
		var status = VcVirtualMachineToolsRunningStatus.fromString(vm.guest.toolsRunningStatus);
		return status === VcVirtualMachineToolsRunningStatus.guestToolsRunning &&
			vm.guestHeartbeatStatus == VcManagedEntityStatus.green;
	}

	/**
	 * Transfers a file from the local vRO file system at the specified location srcPath in the guest at the destPath location
	 * 
	 * @param srcPath vRO file location
	 * @param destPath guest os file location
	 * @param filePermissions guest os file permissions
	 */
	this.transferFileToGuest = function(srcPath, destPath, filePermissions) {
		System.getModule("com.vmware.pscoe.library.util").validateInput(srcPath, "Source path input parameter missing or null");
		System.getModule("com.vmware.pscoe.library.util").validateInput(destPath, "Dest path input parameter missing or null");
		var guestFileAttributes = new VcGuestFileAttributes();

		if (!System.getModule("com.vmware.library.vc.vm.os").isWindowsOsInVm(vm) &&
			filePermissions != null && filePermissions != undefined) {
			logger.info("Setting file permissions: " + filePermissions);
			guestFileAttributes = new VcGuestPosixFileAttributes();
			guestFileAttributes.permissions = filePermissions;
		} else {
			logger.warn("Permission: " + filePermissions + " cannot be set on windows machine");
		}

		var result = retry(function transferFileToGuest() {
			var srcFile = new File(srcPath);
			var uri = fileManager.initiateFileTransferToGuest(vm, guestAuth, destPath, guestFileAttributes, srcFile.length, true);
			return fileManager.putFile(srcPath, uri);
		});

		if (!result) {
			throw "Could not transfer vRO file '" + srcPath + "' to guest at '" + destPath + "'";
		}
	}

	/**
	 * Creates folder under specified directory 
	 * 
	 * @param destPath guest os file location
	 */
	this.createFolderInGuest = function(destPath) {
		System.getModule("com.vmware.pscoe.library.util").validateInput(destPath, "Dest path input parameter missing or null");

		retry(function createFolderInGuest() {
			try {
				fileManager.makeDirectoryInGuest(vm, guestAuth, destPath, true);
			} catch (e) {
				if ((e + "").indexOf("already exists") == -1) {
					throw "Could not create folder under guest at '" + destPath + "' : " + e + e.stack;
				}
			}
		});
	}

	/**
	 * Runs a command programPath with the specified arguments in the specified workingDirectory with the specified environment variables
	 * 
	 * @param programPath
	 * @param arguments
	 * @param workingDirectory
	 * @param environment
	 */
	this.executeCommand = function(programPath, arguments, workingDirectory, environment) {
		System.getModule("com.vmware.pscoe.library.util").validateInput(programPath, "Program path input parameter missing or null");
		System.getModule("com.vmware.pscoe.library.util").validateInput(arguments, "Arguments path input parameter missing or null");

		var guestProgramSpec = new VcGuestProgramSpec();
		guestProgramSpec.programPath = programPath;
		guestProgramSpec.arguments = arguments;
		guestProgramSpec.workingDirectory = workingDirectory;
		guestProgramSpec.envVariables = environment;

		return retry(function executeCommand() {
			return processManager.startProgramInGuest(vm, guestAuth, guestProgramSpec);
		});
	}

	/**
	 * Transfers a file from the guest os to the local vRO file system
	 * 
	 * @param srcPath guest OS file location
	 * @param destPath vRO file location
	 */
	this.downloadFileFromGuest = function(srcPath, destPath) {
		System.getModule("com.vmware.pscoe.library.util").validateInput(srcPath, "Source path input parameter missing or null");
		System.getModule("com.vmware.pscoe.library.util").validateInput(destPath, "Dest path input parameter missing or null");

		var result = retry(function downloadFileFromGuest() {
			var ftInfo = fileManager.initiateFileTransferFromGuest(vm, guestAuth, srcPath);
			return fileManager.downloadFile(destPath, ftInfo);
		});

		if (!result) {
			throw "Could not transfer Guest file '" + srcPath + "' to vRO at '" + destPath + "'";
		}
	}

	/**
	 * Deletes a file in the specified filePath locaiton
	 * 
	 * @param filePath
	 */
	this.deleteFileInGuest = function(filePath) {
		System.getModule("com.vmware.pscoe.library.util").validateInput(filePath, "Path input parameter missing or null");

		retry(function deleteFileInGuest() {
			fileManager.deleteFileInGuest(vm, guestAuth, filePath);
		});
	}

	/**
	 * 
	 * @param pid
	 * @return a Process object by the specified pid
	 */
	this.findGuestProcess = function(pid) {

		var guestProcessInfo = retry(function findGuestProcess() {
			return processManager.listProcessesInGuest(vm, guestAuth, null);
		});

		for each(var process in guestProcessInfo) {
			if (process.pid === pid) {
				return process;
			}
		}
		return null;
	}

	/**
	 * 
	 * @return returns the current guest environment variables
	 */
	this.getGuestEnvironment = function() {
		return retry(function getGuestEnvironment() {
			return processManager.readEnvironmentVariableInGuest(vm, guestAuth, null);
		});
	}

	/**
	 * Wait for Guest Customization to complete by monitoring vmware-imc logs
	 * Success criteria - logs last modified time attribute has to be older than retrySleep value
	 * The check will be performed up to retryCount value
	 * Retry properties are configured by setGuestToolsRetry()
	 * 
	 */
	this.waitGuestCustomization = function() {
		logger.info("Waiting for Guest Customization to complete. VMware-IMC logs has to be idle for Seconds[" + guestTools.retrySleep + "]");

		var imc = {
			guestCustomization: {
				message: "Customization completed when logs stay idle since Time.",
				time: new Date(System.getCurrentTime() - guestTools.retrySleep * 1000),
				completed: true
			},
			logs: {}
		};

		var vmwareImcState = "";

		return retry(function waitGuestCustomization() {
			var vmwareImc = vm.guest.guestFamily.toLowerCase().indexOf('win') != -1 ?
				vmwareImcLogDirectory.windows :
				vmwareImcLogDirectory.linux;
			try {
				var vmwareImcFiles = fileManager.listFilesInGuest(vm, guestAuth, vmwareImc, 0, 100, ".*").files;
			} catch (e) {
				if (e.message.indexOf("was not found")) {
					logger.info("It does not seam that Guest Customization is running. The logging directory is does not exist. Error:" + e);
					return;
				}
				throw e;
			}

			// Get current state of VMware IMC Logs
			// Criteria - number of files, their names, last modified date
			for (var index in vmwareImcFiles) {
				var file = vmwareImcFiles[index];
				// Skip parrent directory
				if (file.path == "..") {
					continue;
				}

				var lastModified = new Date(file.attributes.modificationTime);
				imc.logs[file.path] = {
					lastModified: lastModified
				}

				imc.guestCustomization.completed = imc.guestCustomization.completed && (imc.guestCustomization.time > lastModified);
			}

			var vmwareImcStateNext = JSON.stringify(imc.logs, null, 2);

			if (vmwareImcState != vmwareImcStateNext) {
				vmwareImcState = vmwareImcStateNext;
				logger.debug("VMware IMC Logs:" + vmwareImcState);
				throw "Guest Customization is still logging..."
			}
			logger.info("Assume Guest Customization completed. Did not log anyting for Seconds[" + guestTools.retrySleep + "]");
		});
	}
}

return new Guest();
]]></script>
</dunes-script-module>