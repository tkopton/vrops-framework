<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item0" object-name="Workflow:name=generic" id="c9c69fef-3e2d-4c07-bd9e-e3e40effd3cc" version="1.0.5" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Create iTop Helpdesk Request]]></display-name>
  <description><![CDATA[Creates new Request in the iTop helpdesk]]></description>
  <position y="50.0" x="160.0"/>
  <input>
    <param name="firstName" type="string">
      <description><![CDATA[Requester first name]]></description>
    </param>
    <param name="lastName" type="string">
      <description><![CDATA[Requester last name]]></description>
    </param>
    <param name="orgName" type="string">
      <description><![CDATA[Requester organization name]]></description>
    </param>
    <param name="requestTitle" type="string">
      <description><![CDATA[Request title]]></description>
    </param>
    <param name="requestDescription" type="string">
      <description><![CDATA[Request description]]></description>
    </param>
  </input>
  <output>
    <param name="statusCode" type="number">
      <description><![CDATA[Status code of the HTTP request]]></description>
    </param>
    <param name="contentLength" type="number">
      <description><![CDATA[Length of the request response]]></description>
    </param>
    <param name="headers" type="Properties">
      <description><![CDATA[Response headers]]></description>
    </param>
    <param name="contentAsString" type="string">
      <description><![CDATA[Response content as string]]></description>
    </param>
    <param name="fieldsArray" type="Array/string"/>
    <param name="requestCode" type="string"/>
    <param name="requestMessage" type="string"/>
  </output>
  <attrib name="errorCode" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="statusCodeAttribute" type="number" read-only="false"/>
  <attrib name="content" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Input content]]></description>
  </attrib>
  <attrib name="defaultContentType" type="string" read-only="false">
    <value encoded="n"><![CDATA[application/json]]></value>
    <description><![CDATA[Input content type]]></description>
  </attrib>
  <attrib name="restOperation" type="REST:RESTOperation" read-only="false" conf-id="23bd80b6-4409-43a5-ba8f-cec6099d6030" conf-key="restOperation">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[REST operation to be used for the call]]></description>
  </attrib>
  <attrib name="auth_user" type="string" read-only="false" conf-id="23bd80b6-4409-43a5-ba8f-cec6099d6030" conf-key="auth_user">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Input parameter]]></description>
  </attrib>
  <attrib name="auth_pwd" type="SecureString" read-only="false" conf-id="23bd80b6-4409-43a5-ba8f-cec6099d6030" conf-key="auth_pwd">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[Input parameter]]></description>
  </attrib>
  <workflow-item name="item0" out-name="item3" catch-name="item2" throw-bind-name="errorCode" type="task">
    <display-name><![CDATA[REST call]]></display-name>
    <script encoded="false"><![CDATA[var callerId = new callerId(lastName,firstName);
var fields = new fields('SELECT Organization WHERE name = "'+orgName+ '"', callerId, requestTitle, requestDescription);
var data = new data("core/create", "create user", "UserRequest", "ref, id, friendlyname, caller_id_friendlyname, title, description", fields);

var inputData = JSON.stringify(data);
//System.log("JSON DATA : " + inputData);

var inParamtersValues = [auth_user,auth_pwd,inputData];
var request = restOperation.createRequest(inParamtersValues, content);
//set the request content type
request.contentType = defaultContentType;
//System.log("Request: " + request);
//System.log("Request URL: " + request.fullUrl);
var response = request.execute();
//System.log("Response: " + response);
statusCode = response.statusCode;
statusCodeAttribute = statusCode;
System.log("Status code: " + statusCode);
contentLength = response.contentLength;
headers = response.getAllHeaders();
contentAsString = response.contentAsString;
System.log("Content as string: " + contentAsString);
System.log("");
System.log("==== Attempt to retrieve values ====");
var jsonResponse = JSON.parse(contentAsString);
var objects = jsonResponse.objects;
//Not sure how to get to the specific user request data

for  (var e in objects) {
	System.log(e);
	var requestObject = objects[e];
	//System.log("requestObject String: "+JSON.stringify(requestObject));
	var requestCode = requestObject.code;
	var requestMessage = requestObject.message;
	System.log("Request Code: "+requestCode);
	System.log("Request Message: "+requestMessage);
	System.log("===  Fields: ===");
	var requestFieldsObject = requestObject.fields;
	/*
	System.log("Ref (ticket id): "+requestFieldsObject.ref);
	System.log("caller_id_friendlyname: "+requestFieldsObject.caller_id_friendlyname);
	System.log("Title: "+requestFieldsObject.title);
	System.log("Description: "+requestFieldsObject.description);
	*/
	var jsonString = JSON.stringify(requestFieldsObject);
	var fieldsArray = System.getModule("com.vmware.coe.json").getJSONstringAsArrayOfStrings(jsonString);
	for each (f in fieldsArray){
		System.log(f.split(":")[0] + ": " + f.split(":")[1]);
	}
	//System.log("requestFieldsObject String: "+JSON.stringify(requestFieldsObject));
}


function callerId(name, firstName) {
	this["name"] = name;
	this["first_name"] = firstName;
}

function fields(orgId, callerId, title, description) {
	this["org_id"] = orgId;
	this["caller_id"] = callerId;
	this["title"] = title;
	this["description"] = description;
}

function data(operation,comment,className,outPutFields, fields)
{
	this["operation"]=operation;
	this["comment"]=comment;
	this["class"]=className;
	this["output_fields"]=outPutFields;
	this["fields"] = fields;
}]]></script>
    <in-binding>
      <bind name="content" type="string" export-name="content"/>
      <bind name="auth_user" type="string" export-name="auth_user"/>
      <bind name="auth_pwd" type="SecureString" export-name="auth_pwd"/>
      <bind name="restOperation" type="REST:RESTOperation" export-name="restOperation"/>
      <bind name="statusCodeAttribute" type="number" export-name="statusCodeAttribute"/>
      <bind name="defaultContentType" type="string" export-name="defaultContentType"/>
      <bind name="firstName" type="string" export-name="firstName"/>
      <bind name="lastName" type="string" export-name="lastName"/>
      <bind name="orgName" type="string" export-name="orgName"/>
      <bind name="requestTitle" type="string" export-name="requestTitle"/>
      <bind name="requestDescription" type="string" export-name="requestDescription"/>
    </in-binding>
    <out-binding>
      <bind name="statusCode" type="number" export-name="statusCode"/>
      <bind name="contentLength" type="number" export-name="contentLength"/>
      <bind name="headers" type="Properties" export-name="headers"/>
      <bind name="contentAsString" type="string" export-name="contentAsString"/>
      <bind name="statusCodeAttribute" type="number" export-name="statusCodeAttribute"/>
      <bind name="fieldsArray" type="Array/string" export-name="fieldsArray"/>
      <bind name="requestCode" type="string" export-name="requestCode"/>
      <bind name="requestMessage" type="string" export-name="requestMessage"/>
    </out-binding>
    <position y="100.0" x="120.0"/>
  </workflow-item>
  <workflow-item name="item1" type="end" end-mode="0">
    <position y="230.0" x="160.0"/>
  </workflow-item>
  <workflow-item name="item2" throw-bind-name="errorCode" type="end" end-mode="1">
    <position y="170.0" x="260.0"/>
  </workflow-item>
  <workflow-item name="item3" out-name="item1" type="custom-condition" alt-out-name="item2">
    <display-name><![CDATA[Check status code]]></display-name>
    <script encoded="false"><![CDATA[if ( statusCodeAttribute != 200 ) {
	throw "HTTPError: status code: " + statusCodeAttribute;
} else {
	return true;
}	]]></script>
    <in-binding>
      <bind name="statusCodeAttribute" type="number" export-name="statusCodeAttribute"/>
    </in-binding>
    <position y="170.0" x="120.0"/>
  </workflow-item>
  <presentation>
    <p-step>
      <title><![CDATA[Create a new Request]]></title>
      <p-param name="orgName">
        <desc><![CDATA[Requester organization name]]></desc>
        <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
        <p-qual kind="static" name="defaultValue" type="string"><![CDATA[Demo]]></p-qual>
        <p-qual kind="ognl" name="linkedEnumeration" type="Array/string"><![CDATA[GetAction("com.vmware.coe.itop","getOrganizationNames").call( #auth_user , #auth_pwd , #restOperation , false )]]></p-qual>
      </p-param>
      <p-param name="firstName">
        <desc><![CDATA[Requester first name]]></desc>
        <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
        <p-qual kind="static" name="defaultValue" type="string"><![CDATA[claude]]></p-qual>
      </p-param>
      <p-param name="lastName">
        <desc><![CDATA[Requester last name]]></desc>
        <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
        <p-qual kind="static" name="defaultValue" type="string"><![CDATA[monet]]></p-qual>
      </p-param>
      <p-param name="requestTitle">
        <desc><![CDATA[Request title]]></desc>
        <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
      </p-param>
      <p-param name="requestDescription">
        <desc><![CDATA[Request description]]></desc>
        <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
      </p-param>
    </p-step>
  </presentation>
</workflow>