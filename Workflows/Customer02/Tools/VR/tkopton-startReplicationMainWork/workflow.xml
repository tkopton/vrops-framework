<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item3" object-name="workflow:name=generic" id="ede08e75-adc5-40cb-aca9-e73b1c90d0c6" version="0.1.4" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[tkopton-startReplicationMainWork]]></display-name>
  <position y="27.227272727272727" x="65.0"/>
  <input>
    <param name="vmToReplicate" type="VC:VirtualMachine"/>
    <param name="sourceDatacenter" type="string"/>
    <param name="rpo" type="number"/>
    <param name="quiesceGuestEnabled" type="boolean"/>
  </input>
  <output>
    <param name="replicationDestination" type="string"/>
  </output>
  <attrib name="sourceSite" type="VR:Site" read-only="false"/>
  <attrib name="remoteSite" type="VR:VcRemoteSite" read-only="false"/>
  <attrib name="remoteDatastore" type="VR:RemoteDatastore" read-only="false"/>
  <attrib name="networkCompressionEnabled" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[true]]></value>
  </attrib>
  <attrib name="enableMPIT" type="boolean" read-only="false"/>
  <attrib name="replicationConfig" type="ConfigurationElement" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/ConfigurationElement?id='99e3cea7-b274-4fbe-b380-4491205b0aa5'&dunesName='ConfigurationElement']]></value>
  </attrib>
  <attrib name="vROCredential" type="Credential" read-only="false" conf-id="99e3cea7-b274-4fbe-b380-4491205b0aa5" conf-key="replicationCred">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <attrib name="vm" type="VC:VirtualMachine" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="27.227272727272727" x="684.5"/>
  </workflow-item>
  <workflow-item name="item2" out-name="item1" type="task">
    <display-name><![CDATA[get replication target]]></display-name>
    <script encoded="false"><![CDATA[System.log("BEGIN - get replication target ###########################");

sourceVC=sourceDatacenter.split("-")[1];
if (sourceVC=="2"){
	rzSource="rz2";
} else {
	rzSource="rz1";
}

var sites = System.getModule("com.vmware.library.vr").getSites();
for (i in sites) {
	System.log("VR SITE:::::::" + sites[i].name);
    if (sites[i].name == replicationConfig.getAttributeWithKey(rzSource+"_site").value.name) {
        System.log("SOURCE VR SITE:::::::" + sites[i].name);
		sourceSite = sites[i];
        var remoteSites = sourceSite.getVcRemoteSites();
        for (j in remoteSites) {
			System.log("VR SITE:::::::" + remoteSites[j].name);
            if (remoteSites[j].name == replicationConfig.getAttributeWithKey(rzSource+"_remoteSite").value.name) {
                System.log("VR REMOTE SITE:::::::" + remoteSites[j].name);
                remoteSite = remoteSites[j];
            }
        }
    }
}

var virtualMachines = System.getModule("com.vmware.library.vr").getVcSdkConnectionByVrSite(sourceSite).getAllVirtualMachines();
for (i in virtualMachines) {
    System.log("VC:virtualMachines ID:" + virtualMachines[i].id);
    if (virtualMachines[i].name == vmToReplicate.name) {
        System.log("VC:virtualMachines NAME:" + virtualMachines[i].name);
        vm = virtualMachines[i];
    }
}

System.log("Remote Site Object: " + remoteSite);
System.log("Remote Site NAME: " + remoteSite.name);
System.log("Remote Site URI: " + remoteSite.uri);

var remoteDatastores = System.getModule("com.vmware.library.vr").getRemoteVcSiteDatastores(remoteSite);
for (i in remoteDatastores) {
    System.log("VR:RemoteDatastore NAME:" + remoteDatastores[i].name);
    if (remoteDatastores[i].name == replicationConfig.getAttributeWithKey(rzSource+"_remoteDS").value.name) {
        System.log("VR:RemoteDatastore NAME:" + remoteDatastores[i].name);
        remoteDatastore = remoteDatastores[i];
    }
}

temp=remoteSite.uri;
remoteSiteString=temp.toString().split("/");
replicationDestination=(remoteSiteString[2].split(":"))[0];

System.log("END - get replication target ###########################");]]></script>
    <in-binding>
      <bind name="replicationConfig" type="ConfigurationElement" export-name="replicationConfig"/>
      <bind name="sourceDatacenter" type="string" export-name="sourceDatacenter"/>
      <bind name="vmToReplicate" type="VC:VirtualMachine" export-name="vmToReplicate"/>
    </in-binding>
    <out-binding>
      <bind name="remoteDatastore" type="VR:RemoteDatastore" export-name="remoteDatastore"/>
      <bind name="remoteSite" type="VR:VcRemoteSite" export-name="remoteSite"/>
      <bind name="replicationDestination" type="string" export-name="replicationDestination"/>
      <bind name="sourceSite" type="VR:Site" export-name="sourceSite"/>
      <bind name="vm" type="VC:VirtualMachine" export-name="vm"/>
    </out-binding>
    <position y="37.22727272727273" x="344.5"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="link" linked-workflow-id="7943df99-aefc-45ad-8a03-a987609f3099">
    <display-name><![CDATA[tkopton-Configure Replication_Silent]]></display-name>
    <in-binding>
      <bind name="enableMPIT" type="boolean" export-name="enableMPIT"/>
      <bind name="instancesPerDay" type="number" explicitly-not-bound="true"/>
      <bind name="networkCompressionEnabled" type="boolean" export-name="networkCompressionEnabled"/>
      <bind name="numDays" type="number" explicitly-not-bound="true"/>
      <bind name="quiesceGuestEnabled" type="boolean" export-name="quiesceGuestEnabled"/>
      <bind name="remoteDatastore" type="VR:RemoteDatastore" export-name="remoteDatastore"/>
      <bind name="remoteSite" type="VR:VcRemoteSite" export-name="remoteSite"/>
      <bind name="rpo" type="number" export-name="rpo"/>
      <bind name="sourceSite" type="VR:Site" export-name="sourceSite"/>
      <bind name="vmToReplicate" type="VC:VirtualMachine" export-name="vm"/>
    </in-binding>
    <out-binding>
      <bind name="resultGroup" type="VR:VcToVcSourceGroup" explicitly-not-bound="true"/>
    </out-binding>
    <description><![CDATA[Configure a virtual machine for replication from this site to another vSphere site.]]></description>
    <position y="37.22727272727273" x="504.5"/>
  </workflow-item>
  <workflow-item name="item3" prototype-id="change-credential" out-name="item2" content-mode="x" type="task">
    <display-name><![CDATA[Change credential]]></display-name>
    <script encoded="false"><![CDATA[//Auto-generated script
if (newCredential != null) {
	if (String(newCredential) !== String(Server.getCredential())) {
		workflow.changeCredential(newCredential) ;
	}
	else {
		System.log("Change credential is same as current user!");
	}
}
else  {
	throw "'newCredential' is NULL";
}
]]></script>
    <in-binding>
      <bind name="newCredential" type="Credential" export-name="vROCredential">
        <description><![CDATA[New credential]]></description>
      </bind>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Change current execution credential]]></description>
    <position y="37.22727272727273" x="184.5"/>
  </workflow-item>
  <presentation>
    <p-param name="vmToReplicate">
      <desc><![CDATA[vcvm]]></desc>
    </p-param>
    <p-param name="sourceDatacenter">
      <desc><![CDATA[sourceDatacenter]]></desc>
    </p-param>
    <p-param name="rpo">
      <desc><![CDATA[rpo]]></desc>
    </p-param>
    <p-param name="quiesceGuestEnabled">
      <desc><![CDATA[quiesceGuestEnabled]]></desc>
    </p-param>
  </presentation>
</workflow>