<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item11" object-name="workflow:name=generic" id="e2cb8c67-b007-4a84-a826-35c8a6e453af" version="0.0.0" api-version="6.0.0" allowed-operations="vfe" editor-version="2.0" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[tk-updatePricingDataOnVMs]]></display-name>
  <position y="10.0" x="40.0"/>
  <input>
    <param name="groupsRelationships" type="CompositeType(vmIDs:Array/string,projectID:string):tkGroupChildren"/>
  </input>
  <attrib name="vropsProps" type="ConfigurationElement" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/ConfigurationElement?id='39f63a77-6d8e-4bf8-854e-94fc228f2269'&dunesName='ConfigurationElement']]></value>
  </attrib>
  <attrib name="getObjectLastProps" type="REST:RESTOperation" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='d527adad-f227-4685-bb5a-63c8f427a9f2:36790725-950b-4d9c-8c9f-4fcee021563e'&dunesName='REST:RESTOperation']]></value>
  </attrib>
  <attrib name="pricingCardId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="getPricingCard" type="REST:RESTOperation" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='d527adad-f227-4685-bb5a-63c8f427a9f2:70d1af24-f925-4384-8e27-f93616c87793'&dunesName='REST:RESTOperation']]></value>
  </attrib>
  <attrib name="memBaseRate" type="number" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="cpuBaseRate" type="number" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="storageBaseRate" type="number" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="addMetrics" type="REST:RESTOperation" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/CustomSDKObject?id='d527adad-f227-4685-bb5a-63c8f427a9f2:0d5b4a94-4e4c-45b3-87dd-c4d1a48053fe'&dunesName='REST:RESTOperation']]></value>
  </attrib>
  <attrib name="pricingCardData" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="memChargePeriod" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="cpuChargePeriod" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="storageChargePeriod" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="memChargeOnPowerState" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="cpuChargeOnPowerState" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="storageChargeOnPowerState" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="vraPricingCardName" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="vraPricingCardId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <in-binding/>
    <position y="80.0" x="320.0"/>
  </workflow-item>
  <workflow-item name="item11" out-name="item12" type="task">
    <display-name><![CDATA[getProjectProps]]></display-name>
    <script encoded="false"><![CDATA[var vropsToken = vropsProps.getAttributeWithKey("vropsTokenValue").value;
var params = new Array();
var jsonResponse = null;

getProjectPricingCardId(groupsRelationships.projectID);

function getProjectPricingCardId(projectID) {
    params.push(projectID);
    var request = getObjectLastProps.createRequest(params, null);

    request.contentType = "application/json";
    request.setHeader("accept", "application/json");
    request.setHeader("Authorization", "vRealizeOpsToken " + vropsToken);

    var response = request.execute();
    var contentAsString = response.contentAsString;
    jsonResponse = JSON.parse(contentAsString);
    
    jsonResponse.property.forEach(function(object) {
        if(object.name == "metering|MeteringPolicyId") {
            pricingCardId = object.value;
        }
        });

    //System.log(pricingCardId);
    params.pop();
}
]]></script>
    <in-binding>
      <bind name="vropsProps" type="ConfigurationElement" export-name="vropsProps"/>
      <bind name="getObjectLastProps" type="REST:RESTOperation" export-name="getObjectLastProps"/>
      <bind name="groupsRelationships" type="CompositeType(vmIDs:Array/string,projectID:string):tkGroupChildren" export-name="groupsRelationships"/>
    </in-binding>
    <out-binding>
      <bind name="pricingCardId" type="string" export-name="pricingCardId"/>
    </out-binding>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="90.0" x="0.0"/>
  </workflow-item>
  <workflow-item name="item12" out-name="item14" type="task">
    <display-name><![CDATA[getPricingCard]]></display-name>
    <script encoded="false"><![CDATA[var vropsToken = vropsProps.getAttributeWithKey("vropsTokenValue").value;
var params = new Array();
var jsonResponse = null;

getPricingCardDetails(pricingCardId);


function getPricingCardDetails(cardId) {
    params.push(cardId);
    var request = getPricingCard.createRequest(params, null);

    request.contentType = "application/json";
    request.setHeader("accept", "application/json");
    request.setHeader("X-vRealizeOps-API-use-unsupported", "true");
    request.setHeader("Authorization", "vRealizeOpsToken " + vropsToken);

    var response = request.execute();
    var contentAsString = response.contentAsString;
    pricingCardData = contentAsString;
    jsonResponse = JSON.parse(contentAsString);

    jsonResponse.meterings.forEach(function (object) {
        var priceItem = object.itemName;

        switch (priceItem) {
            case "memory":
                memBaseRate = object.metering.baseRate;
                memChargePeriod = object.metering.chargePeriod;
                memChargeOnPowerState = object.metering.chargeOnPowerState;
                break;
            case "vcpu":
                cpuBaseRate = object.metering.baseRate;
                cpuChargePeriod = object.metering.chargePeriod;
                cpuChargeOnPowerState = object.metering.chargeOnPowerState;
                break;
            case "storage":
                storageBaseRate = object.metering.baseRate;
                storageChargePeriod = object.metering.chargePeriod;
                storageChargeOnPowerState = object.metering.chargeOnPowerState;
                break;
            default:
                System.log("No price metering found");
        }
    });

    var tempName = jsonResponse.name;
    var temp = tempName.split(":");
    temp = temp[3];
    vraPricingCardId = temp;

    params.pop();
}]]></script>
    <in-binding>
      <bind name="getPricingCard" type="REST:RESTOperation" export-name="getPricingCard"/>
      <bind name="vropsProps" type="ConfigurationElement" export-name="vropsProps"/>
      <bind name="pricingCardId" type="string" export-name="pricingCardId"/>
    </in-binding>
    <out-binding>
      <bind name="cpuBaseRate" type="number" export-name="cpuBaseRate"/>
      <bind name="memBaseRate" type="number" export-name="memBaseRate"/>
      <bind name="storageBaseRate" type="number" export-name="storageBaseRate"/>
      <bind name="pricingCardData" type="string" export-name="pricingCardData"/>
      <bind name="cpuChargeOnPowerState" type="string" export-name="cpuChargeOnPowerState"/>
      <bind name="memChargeOnPowerState" type="string" export-name="memChargeOnPowerState"/>
      <bind name="storageChargeOnPowerState" type="string" export-name="storageChargeOnPowerState"/>
      <bind name="cpuChargePeriod" type="string" export-name="cpuChargePeriod"/>
      <bind name="memChargePeriod" type="string" export-name="memChargePeriod"/>
      <bind name="storageChargePeriod" type="string" export-name="storageChargePeriod"/>
      <bind name="vraPricingCardId" type="string" export-name="vraPricingCardId"/>
    </out-binding>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="90.0" x="120.0"/>
  </workflow-item>
  <workflow-item name="item13" out-name="item0" type="task">
    <display-name><![CDATA[updateVMs]]></display-name>
    <script encoded="false"><![CDATA[var vropsToken = vropsProps.getAttributeWithKey("vropsTokenValue").value;
var jsonBody = {
    "stat-content": []
};
var statContent = {
    "statKey": null,
    "timestamps": [
        null
    ],
    "values": [
        null
    ],
    "others": [],
    "otherAttributes": {}
}

var memJsonBody0 = JSON.parse(JSON.stringify(statContent));
var cpuJsonBody0 = JSON.parse(JSON.stringify(statContent));
var storageJsonBody0 = JSON.parse(JSON.stringify(statContent));

var memJsonBody1 = JSON.parse(JSON.stringify(statContent));
var cpuJsonBody1 = JSON.parse(JSON.stringify(statContent));
var storageJsonBody1 = JSON.parse(JSON.stringify(statContent));

var memJsonBody2 = JSON.parse(JSON.stringify(statContent));
var cpuJsonBody2 = JSON.parse(JSON.stringify(statContent));
var storageJsonBody2 = JSON.parse(JSON.stringify(statContent));

var vraCardName = JSON.parse(JSON.stringify(statContent));

createJsonBody(memBaseRate, cpuBaseRate, storageBaseRate);

// to do: use the json response instead of single values
createJsonBodyNEW(pricingCardData);
// System.log("The pricing card json response: " + pricingCardData);

for (var i = 0; i < groupsRelationships.vmIDs.length; i++) {
    System.log("Processing VM: " + i + " with the name: " + groupsRelationships.vmIDs[i]);
    callAddMetrics(groupsRelationships.vmIDs[i], jsonBody);
}


function createJsonBody(memRate, cpuRate, storageRate) {
    // base rates
    memJsonBody0.statKey = "Custom Metrics|Price Rates2|memory";
    memJsonBody0.timestamps[0] = Date.now();
    memJsonBody0.values[0] = memRate.toString();
    jsonBody["stat-content"].push(memJsonBody0);

    cpuJsonBody0.statKey = "Custom Metrics|Price Rates2|vcpu";
    cpuJsonBody0.timestamps[0] = Date.now();
    cpuJsonBody0.values[0] = cpuBaseRate.toString();
    jsonBody["stat-content"].push(cpuJsonBody0);

    storageJsonBody0.statKey = "Custom Metrics|Price Rates2|storage";
    storageJsonBody0.timestamps[0] = Date.now();
    storageJsonBody0.values[0] = storageBaseRate.toString();
    jsonBody["stat-content"].push(storageJsonBody0);

    // charge period
    memJsonBody1.statKey = "Custom Metrics|Charge Period2|memory";
    memJsonBody1.timestamps[0] = Date.now();
    memJsonBody1.values[0] = memChargePeriod;
    jsonBody["stat-content"].push(memJsonBody1);

    cpuJsonBody1.statKey = "Custom Metrics|Charge Period2|vcpu";
    cpuJsonBody1.timestamps[0] = Date.now();
    cpuJsonBody1.values[0] = cpuChargePeriod;
    jsonBody["stat-content"].push(cpuJsonBody1);

    storageJsonBody1.statKey = "Custom Metrics|Charge Period2|storage";
    storageJsonBody1.timestamps[0] = Date.now();
    storageJsonBody1.values[0] = storageChargePeriod;
    jsonBody["stat-content"].push(storageJsonBody1);

    // charge on power state
    memJsonBody2.statKey = "Custom Metrics|Charge On Power State2|memory";
    memJsonBody2.timestamps[0] = Date.now();
    memJsonBody2.values[0] = memChargeOnPowerState;
    jsonBody["stat-content"].push(memJsonBody2);

    cpuJsonBody2.statKey = "Custom Metrics|Charge On Power State2|vcpu";
    cpuJsonBody2.timestamps[0] = Date.now();
    cpuJsonBody2.values[0] = cpuChargeOnPowerState;
    jsonBody["stat-content"].push(cpuJsonBody2);

    storageJsonBody2.statKey = "Custom Metrics|Charge On Power State2|storage";
    storageJsonBody2.timestamps[0] = Date.now();
    storageJsonBody2.values[0] = storageChargeOnPowerState;
    jsonBody["stat-content"].push(storageJsonBody2);

    // vRA Pricing Card Name
    vraCardName.statKey = "Custom Metrics|vRA Pricing Card";
    vraCardName.timestamps[0] = Date.now();
    vraCardName.values[0] = vraPricingCardName;
    jsonBody["stat-content"].push(vraCardName);
}

// to do: use the json response as input instead of single values
function createJsonBodyNEW(pricingCardData) {
    const pCardJson = JSON.parse(pricingCardData);

    var arr = pCardJson.meterings;

    for (var i = 0; i < arr.length; i++) {
        var obj = arr[i];
        System.log("\narray index: " + i);
        for (var key in obj) {
            var value = obj[key];
            System.log(key, value);
            if (key == "metering") {
                for(var property in obj[key]) {
                    System.log(obj[key][property]);
                    }
                }
            }
        }

    /*
    memJsonBody.statKey = "Custom Properties|Price Rates|memory";
    memJsonBody.timestamps[0] = Date.now();
    memJsonBody.values[0] = memRate;
    jsonBody["property-content"].push(memJsonBody);

    cpuJsonBody.statKey = "Custom Properties|Price Rates|vcpu";
    cpuJsonBody.timestamps[0] = Date.now();
    cpuJsonBody.values[0] = cpuBaseRate;
    jsonBody["property-content"].push(cpuJsonBody);

    storageJsonBody.statKey = "Custom Properties|Price Rates|storage";
    storageJsonBody.timestamps[0] = Date.now();
    storageJsonBody.values[0] = storageBaseRate;
    jsonBody["property-content"].push(storageJsonBody);
    */
}

function callAddMetrics(vmID, jsonBody) {
    var requestBody = JSON.stringify(jsonBody);
    System.log("JSON Body -----> \n" + requestBody);
    var params = new Array();
    params.push(vmID);
    var jsonResponse = null;
    var request = addMetrics.createRequest(params, requestBody);

    request.setHeader("Authorization", "vRealizeOpsToken " + vropsToken);
    request.contentType = "application/json";
    request.setHeader("accept", "application/json");

    var response = request.execute();
    System.log(response.statusCode);

    params.pop();
}
]]></script>
    <in-binding>
      <bind name="vropsProps" type="ConfigurationElement" export-name="vropsProps"/>
      <bind name="cpuBaseRate" type="number" export-name="cpuBaseRate"/>
      <bind name="memBaseRate" type="number" export-name="memBaseRate"/>
      <bind name="storageBaseRate" type="number" export-name="storageBaseRate"/>
      <bind name="groupsRelationships" type="CompositeType(vmIDs:Array/string,projectID:string):tkGroupChildren" export-name="groupsRelationships"/>
      <bind name="pricingCardData" type="string" export-name="pricingCardData"/>
      <bind name="cpuChargePeriod" type="string" export-name="cpuChargePeriod"/>
      <bind name="memChargePeriod" type="string" export-name="memChargePeriod"/>
      <bind name="storageChargePeriod" type="string" export-name="storageChargePeriod"/>
      <bind name="cpuChargeOnPowerState" type="string" export-name="cpuChargeOnPowerState"/>
      <bind name="memChargeOnPowerState" type="string" export-name="memChargeOnPowerState"/>
      <bind name="storageChargeOnPowerState" type="string" export-name="storageChargeOnPowerState"/>
      <bind name="vraPricingCardName" type="string" export-name="vraPricingCardName"/>
      <bind name="addMetrics" type="REST:RESTOperation" export-name="addMetrics"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="20.0" x="280.0"/>
  </workflow-item>
  <workflow-item name="item14" out-name="item13" type="link" linked-workflow-id="9d370b73-b458-4a39-b53e-d63c42b5f198">
    <display-name><![CDATA[tk-testvRAPricingCardDetails]]></display-name>
    <in-binding>
      <bind name="pricingCardId" type="string" export-name="vraPricingCardId"/>
    </in-binding>
    <out-binding>
      <bind name="pricingCardName" type="string" export-name="vraPricingCardName"/>
    </out-binding>
    <description><![CDATA[ ]]></description>
    <position y="20.0" x="120.0"/>
  </workflow-item>
  <presentation/>
</workflow>