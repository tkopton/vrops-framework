<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="workflow:name=generic" id="69d67b64-f790-4bcd-86d9-047acb884555" version="1.0.7" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Configure guest OS user and domain operation]]></display-name>
  <description><![CDATA[Configure PS PpS guest OS User and Domain operation component and assign the configuration to a blueprint.]]></description>
  <position y="9.545454545454543" x="45.0"/>
  <input>
    <param name="blueprint" type="vCACCAFE:CompositeBlueprint">
      <description><![CDATA[Blueprint to extend]]></description>
    </param>
    <param name="component" type="string">
      <description><![CDATA[Select Component to be assigned with the workflows at the specified state. Leave empty for assignment on the composite blueprint]]></description>
    </param>
    <param name="vmUsername" type="string">
      <description><![CDATA[Guest username]]></description>
    </param>
    <param name="vmPassword" type="SecureString">
      <description><![CDATA[Guest Password]]></description>
    </param>
    <param name="configurationName" type="string">
      <description><![CDATA[The name of the property prefix]]></description>
    </param>
    <param name="typeCommand" type="string"/>
    <param name="userName" type="string"/>
    <param name="userPassword" type="SecureString"/>
    <param name="groupName" type="string"/>
    <param name="domain" type="string"/>
    <param name="domainUserName" type="string"/>
    <param name="domainPassword" type="SecureString"/>
    <param name="leaveDomainOnDisposing" type="boolean"/>
    <param name="organizationalUnit" type="string">
      <description><![CDATA[OU to move to]]></description>
    </param>
  </input>
  <attrib name="workflowStateProvisioned" type="string" read-only="false">
    <value encoded="n"><![CDATA[VMPSMasterWorkflow32.MachineProvisioned]]></value>
    <description><![CDATA[Workflow state]]></description>
  </attrib>
  <attrib name="provisioningOperationWorkflow" type="Workflow" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/Workflow?id='dadbec55-001e-4ed2-8a7e-aa8d874fa9d6'&dunesName='Workflow']]></value>
  </attrib>
  <attrib name="disposingOperationWorkflow" type="Workflow" read-only="false">
    <value encoded="n"><![CDATA[dunes://service.dunes.ch/Workflow?id='88f1d818-c936-4c93-8e89-1704a4e92c48'&dunesName='Workflow']]></value>
  </attrib>
  <attrib name="workflowStateDisposing" type="string" read-only="false">
    <value encoded="n"><![CDATA[VMPSMasterWorkflow32.Disposing]]></value>
    <description><![CDATA[Workflow state]]></description>
  </attrib>
  <attrib name="replaceExistingProps" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[true]]></value>
    <description><![CDATA[Replace the value of existing properties]]></description>
  </attrib>
  <attrib name="propertyGroupPrefix" type="string" read-only="false">
    <value encoded="n"><![CDATA[Extensibility.Workflows.PpS.UserDomOps.]]></value>
  </attrib>
  <attrib name="advancedConfigJSONParsed" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="wfProvIdentifierName" type="string" read-only="false">
    <value encoded="n"><![CDATA[Prov]]></value>
  </attrib>
  <attrib name="wfDispIdentifierName" type="string" read-only="false">
    <value encoded="n"><![CDATA[Disp]]></value>
  </attrib>
  <attrib name="propertyGroupName" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="isConcurrent" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[false]]></value>
    <description><![CDATA[Should the workflow allow concurrent executions]]></description>
  </attrib>
  <attrib name="sendEmailOnError" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[false]]></value>
  </attrib>
  <attrib name="wfToRun" type="Array/CompositeType(wfIdentifierName:string,workflowState:string,workflow:Workflow,isConcurrent:boolean,continueOnError:boolean,sendEmailOnError:boolean):wfIdentifier" read-only="false">
    <value encoded="n"><![CDATA[__NULL__]]></value>
    <description><![CDATA[WFIdentifier/Workflow Properties to run at the specified state]]></description>
  </attrib>
  <attrib name="appendToExistingPropertyGroup" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[true]]></value>
  </attrib>
  <attrib name="wfProvContinueOnError" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[false]]></value>
  </attrib>
  <attrib name="wfDispContinueOnError" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[true]]></value>
  </attrib>
  <attrib name="addGeneralPropertiesToCommonGroup" type="boolean" read-only="false">
    <value encoded="n"><![CDATA[false]]></value>
  </attrib>
  <attrib name="operationConfigsPrefix" type="string" read-only="false">
    <value encoded="n"><![CDATA[UserDomOps]]></value>
  </attrib>
  <workflow-item name="item1" out-name="item9" type="task">
    <display-name><![CDATA[Prepare Basic Properties]]></display-name>
    <script encoded="false"><![CDATA[// Property names should not include spaces. Also filter any non alphanumeric character. 
var logger = System.getModule("com.vmware.pscoe.library.logging").getLogger("com.vmware.pscoe.pps.guestuserdomainops", null);

wfToRun = [];

var advancedConfigJSON = null;
try {
	advancedConfigJSON = System.getModule("com.vmware.pscoe.library.vra.dispatcher.configuration").loadSimplifiedJsonForPropertyGroup(blueprint, propertyGroupPrefix, configurationName);
	logger.debug("Found existing configuration with name " + configurationName + ": " + advancedConfigJSON);
} catch (e) {
	logger.debug ("Could not find existing property group with name " + configurationName + ". Error: " + e);
}
if (advancedConfigJSON) {
	throw "Existing configuration with name " + configurationName + ". Will not overwrite existing property group.";
}

advancedConfigJSONParsed = advancedConfigJSON ? JSON.parse(advancedConfigJSON) : {};

if (!advancedConfigJSONParsed[operationConfigsPrefix])
	advancedConfigJSONParsed[operationConfigsPrefix] = [];

var workflowsIds = [];
workflowsIds.push(wfProvIdentifierName);

if(typeCommand == "joinDomain" && leaveDomainOnDisposing) {
	workflowsIds.push(wfDispIdentifierName);
}

advancedConfigJSONParsed.vmUsername = vmUsername;
advancedConfigJSONParsed.vmPassword = vmPassword;

var operation = new Properties();
addValueToPropertyIfNotEmpty(operation, "type", typeCommand);

var operationInput = new Properties();

addValueToPropertyIfNotEmpty(operationInput, "userName", userName);
addValueToPropertyIfNotEmpty(operationInput, "userPassword", userPassword);
addValueToPropertyIfNotEmpty(operationInput, "groupName", groupName);
addValueToPropertyIfNotEmpty(operationInput, "domain", domain);
addValueToPropertyIfNotEmpty(operationInput, "domainUserName", domainUserName);
addValueToPropertyIfNotEmpty(operationInput, "domainPassword", domainPassword);
addValueToPropertyIfNotEmpty(operationInput, "ou", organizationalUnit);

operation.put("operationInput", operationInput);

var opDefinition = new Properties();
opDefinition.put("wfParameters", operation);
opDefinition.put("wfIdentifierNames", workflowsIds);

advancedConfigJSONParsed[operationConfigsPrefix].push(opDefinition);

encryptedProperties = ["vmPassword", "userPassword", "domainPassword"];
advancedConfigJSONParsed.encryptedProperties = encryptedProperties;

advancedConfigJSONParsed = JSON.stringify(advancedConfigJSONParsed);
logger.debug("advancedConfigJSONParsed: " + advancedConfigJSONParsed);

// Functions ************************

function addValueToPropertyIfNotEmpty(property, key, value){
	var Validator = System.getModule("com.vmware.pscoe.library.validator").Validator();
	var validator = new Validator();

	if ( !validator.isBlank(value) ){
		property.put(key, value);
	}
	return property;
}]]></script>
    <in-binding>
      <bind name="disposingOperationWorkflow" type="Workflow" export-name="disposingOperationWorkflow"/>
      <bind name="domain" type="string" export-name="domain"/>
      <bind name="domainPassword" type="SecureString" export-name="domainPassword"/>
      <bind name="domainUserName" type="string" export-name="domainUserName"/>
      <bind name="groupName" type="string" export-name="groupName"/>
      <bind name="provisioningOperationWorkflow" type="Workflow" export-name="provisioningOperationWorkflow"/>
      <bind name="typeCommand" type="string" export-name="typeCommand"/>
      <bind name="userName" type="string" export-name="userName"/>
      <bind name="userPassword" type="SecureString" export-name="userPassword"/>
      <bind name="vmPassword" type="SecureString" export-name="vmPassword"/>
      <bind name="vmUsername" type="string" export-name="vmUsername"/>
      <bind name="wfDispIdentifierName" type="string" export-name="wfDispIdentifierName"/>
      <bind name="wfProvIdentifierName" type="string" export-name="wfProvIdentifierName"/>
      <bind name="workflowStateDisposing" type="string" export-name="workflowStateDisposing"/>
      <bind name="workflowStateProvisioned" type="string" export-name="workflowStateProvisioned"/>
      <bind name="leaveDomainOnDisposing" type="boolean" export-name="leaveDomainOnDisposing"/>
      <bind name="configurationName" type="string" export-name="configurationName"/>
      <bind name="blueprint" type="vCACCAFE:CompositeBlueprint" export-name="blueprint"/>
      <bind name="propertyGroupPrefix" type="string" export-name="propertyGroupPrefix"/>
      <bind name="organizationalUnit" type="string" export-name="organizationalUnit"/>
      <bind name="operationConfigsPrefix" type="string" export-name="operationConfigsPrefix"/>
    </in-binding>
    <out-binding>
      <bind name="advancedConfigJSONParsed" type="string" export-name="advancedConfigJSONParsed"/>
    </out-binding>
    <position y="19.045454545454543" x="144.5"/>
  </workflow-item>
  <workflow-item name="item9" out-name="item2" type="task">
    <display-name><![CDATA[Configure WF to run & PropGroupName]]></display-name>
    <script encoded="false"><![CDATA[wfToRun = [];

var wf = new Properties();
wf.put("workflow", provisioningOperationWorkflow);
wf.put("wfIdentifierName", wfProvIdentifierName);
wf.put("workflowState", workflowStateProvisioned);
wf.put("continueOnError", wfProvContinueOnError);
wf.put("isConcurrent", isConcurrent);
wf.put("sendEmailOnError", sendEmailOnError);
wfToRun.push(wf);

var wf = new Properties();
wf.put("workflow", disposingOperationWorkflow);
wf.put("wfIdentifierName", wfDispIdentifierName);
wf.put("workflowState", workflowStateDisposing);
wf.put("continueOnError", wfDispContinueOnError);
wf.put("isConcurrent", isConcurrent);
wf.put("sendEmailOnError", sendEmailOnError);
wfToRun.push(wf);

propertyGroupName = propGroupPrefix + configurationName;
]]></script>
    <in-binding>
      <bind name="configurationName" type="string" export-name="configurationName"/>
      <bind name="disposingOperationWorkflow" type="Workflow" export-name="disposingOperationWorkflow"/>
      <bind name="isConcurrent" type="boolean" export-name="isConcurrent"/>
      <bind name="propGroupPrefix" type="string" export-name="propertyGroupPrefix"/>
      <bind name="provisioningOperationWorkflow" type="Workflow" export-name="provisioningOperationWorkflow"/>
      <bind name="sendEmailOnError" type="boolean" export-name="sendEmailOnError"/>
      <bind name="wfDispIdentifierName" type="string" export-name="wfDispIdentifierName"/>
      <bind name="wfProvIdentifierName" type="string" export-name="wfProvIdentifierName"/>
      <bind name="workflowStateDisposing" type="string" export-name="workflowStateDisposing"/>
      <bind name="workflowStateProvisioned" type="string" export-name="workflowStateProvisioned"/>
      <bind name="wfProvContinueOnError" type="boolean" export-name="wfProvContinueOnError"/>
      <bind name="wfDispContinueOnError" type="boolean" export-name="wfDispContinueOnError"/>
    </in-binding>
    <out-binding>
      <bind name="propertyGroupName" type="string" export-name="propertyGroupName"/>
      <bind name="wfToRun" type="Array/CompositeType(wfIdentifierName:string,workflowState:string,workflow:Workflow,isConcurrent:boolean,continueOnError:boolean,sendEmailOnError:boolean):wfIdentifier" export-name="wfToRun"/>
    </out-binding>
    <position y="19.045454545454543" x="284.5"/>
  </workflow-item>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="9.045454545454543" x="604.5"/>
  </workflow-item>
  <workflow-item name="item2" out-name="item0" type="link" linked-workflow-id="c3027636-fe21-4998-a986-28f2f9bf33fa">
    <display-name><![CDATA[Assign vRO Workflows To Blueprint (JSON input)]]></display-name>
    <in-binding>
      <bind name="wfToRun" type="Array/CompositeType(wfIdentifierName:string,workflowState:string,workflow:Workflow,isConcurrent:boolean,continueOnError:boolean,sendEmailOnError:boolean):wfIdentifier" export-name="wfToRun">
        <description><![CDATA[WFIdentifier/Workflow Properties to run at the specified state]]></description>
      </bind>
      <bind name="blueprint" type="vCACCAFE:CompositeBlueprint" export-name="blueprint">
        <description><![CDATA[Blueprint to extend]]></description>
      </bind>
      <bind name="component" type="string" export-name="component">
        <description><![CDATA[Select Component to be assigned with the workflows at the specified state. Leave empty for assignment on the composite blueprint]]></description>
      </bind>
      <bind name="replaceExistingProps" type="boolean" export-name="replaceExistingProps">
        <description><![CDATA[Replace the value of existing properties]]></description>
      </bind>
      <bind name="propGroupName" type="string" export-name="propertyGroupName"/>
      <bind name="jsonParams" type="string" export-name="advancedConfigJSONParsed"/>
      <bind name="propGroupPrefix" type="string" export-name="propertyGroupPrefix"/>
      <bind name="appendToExistingPropertyGroup" type="boolean" export-name="appendToExistingPropertyGroup"/>
      <bind name="addGeneralPropertiesToCommonGroup" type="boolean" export-name="addGeneralPropertiesToCommonGroup"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Adds or updates a state change  workflow on several blueprints and their virtual machines]]></description>
    <position y="19.045454545454543" x="424.5"/>
  </workflow-item>
  <presentation>
    <p-step>
      <title><![CDATA[Blueprint]]></title>
      <p-param name="blueprint">
        <desc><![CDATA[Blueprint to extend]]></desc>
        <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
      </p-param>
      <p-param name="component">
        <desc><![CDATA[Select Component to be assigned with the workflows at the specified state. Leave empty for assignment on the composite blueprint]]></desc>
        <p-qual kind="ognl" name="genericEnumeration" type="Array/string"><![CDATA[GetAction("com.vmware.pscoe.library.vra","getComponentNames").call( #blueprint , true )]]></p-qual>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#blueprint != null]]></p-qual>
      </p-param>
      <p-param name="vmUsername">
        <desc><![CDATA[Guest username]]></desc>
        <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
      </p-param>
      <p-param name="vmPassword">
        <desc><![CDATA[Guest Password]]></desc>
        <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
      </p-param>
    </p-step>
    <p-step>
      <title><![CDATA[Guest Operations]]></title>
      <p-param name="configurationName">
        <desc><![CDATA[Configuration name (prefix will be added: ${propertyGroupPrefix})]]></desc>
        <p-qual kind="static" name="mandatory" type="boolean"><![CDATA[true]]></p-qual>
      </p-param>
      <p-param name="typeCommand">
        <desc><![CDATA[Type of the command]]></desc>
        <p-qual kind="ognl" name="genericEnumeration" type="Array/string"><![CDATA[GetAction("com.vmware.pscoe.pps.guestuserdomainops","getAvailableCommandsForProvisioning").call()]]></p-qual>
      </p-param>
      <p-param name="leaveDomainOnDisposing">
        <desc><![CDATA[Leave the domain on disposing]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#typeCommand=="joinDomain"]]></p-qual>
      </p-param>
      <p-param name="userName">
        <desc><![CDATA[Username]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#typeCommand=="addUser" || #typeCommand=="addUserToGroup"]]></p-qual>
      </p-param>
      <p-param name="userPassword">
        <desc><![CDATA[User password]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#typeCommand=="addUser"]]></p-qual>
      </p-param>
      <p-param name="groupName">
        <desc><![CDATA[Group name]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#typeCommand=="addGroup" || #typeCommand=="addUserToGroup"]]></p-qual>
      </p-param>
      <p-param name="domain">
        <desc><![CDATA[Domain]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#typeCommand=="joinDomain" || #typeCommand=="leaveDomain"]]></p-qual>
      </p-param>
      <p-param name="domainUserName">
        <desc><![CDATA[Domain user name]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#typeCommand=="joinDomain" || #typeCommand=="leaveDomain"]]></p-qual>
      </p-param>
      <p-param name="domainPassword">
        <desc><![CDATA[Domain password]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#typeCommand=="joinDomain" || #typeCommand=="leaveDomain"]]></p-qual>
      </p-param>
      <p-param name="organizationalUnit">
        <desc><![CDATA[OU to move to]]></desc>
        <p-qual kind="ognl" name="visible" type="boolean"><![CDATA[#typeCommand=="moveToOu"]]></p-qual>
      </p-param>
    </p-step>
  </presentation>
</workflow>